# Original code created by PistonMiner and Zephiles for Paper Mario: The Thousand-Year Door
# Code ported to Super Mario Sunshine by Zephiles

# 80286EC8 - Address to hook for this code

# Set global function/variable/offset locations/values
.set INTERNAL_FILENAME_LOCATION,0x800038CC
.set gpCardManagerOffset,-0x617C
.set gpCardManagerMemCardWorkAreaOffset,0x12C
.set heapOffset,-0x6068
.set CARDProbeEx,0x803379A8
.set CARDMount,0x803381DC
.set CARDOpen,0x80338C8C
.set CARDRead,0x80339620
.set memset,0x80003100
.set DCFlushRange,0x80322F8C
.set ICInvalidateRange,0x80323054
.set free,0x802A1324
.set alloc,0x802A0B9C
.set CARDClose,0x80338E04
.set CARDUnmount,0x803382C0

# Backup register values
stwu sp,-0x30(sp)
stmw r25,0x8(sp)

# Initialize static values used for addresses
lis r31,0x8000
lis r30,0x802A
lis r29,0x8033

li r28,0 # Used to check if a REL file is loaded or not

# Check if a Memory Card is present
# To avoid an infinite loop, only check for a memory card a set amount of times
lis r27,0x000F
ori r27,r27,0x4240 # Check 1,000,000 times

checkForMemoryCardLoop:
ori r3,r29,CARDProbeEx@l
mtlr r3
li r3,0 # Memory Card Slot A
li r4,0 # Pointer to the Memory Size (Not needed, so NULL)
li r5,0 # Pointer to the Sector Size (Not needed, so NULL)
blrl
cmpwi r3,-1 # CARD_RESULT_BUSY
bne- exitCheckForMemoryCardLoop

# Exit if the limit has been reached
subic. r27,r27,1
bgt+ checkForMemoryCardLoop

exitCheckForMemoryCardLoop:
cmpwi r3,0 # Check if something went wrong
bne- exit

# Mount the Memory Card
# To avoid an infinite loop, only try to mount a set amount of times
lis r27,0x000F
ori r27,r27,0x4240 # Check 1,000,000 times

# Get the pointer to the Work Area for CARDMount to use
lwz r26,gpCardManagerOffset(r13)
lwz r26,gpCardManagerMemCardWorkAreaOffset(r26)

mountMemoryCardLoop:
ori r3,r29,CARDMount@l
mtlr r3
li r3,0 # Memory Card Slot A
mr r4,r26 # Pointer to the Work Area
li r5,0 # Detach Callback function (Want to avoid using, so NULL)
blrl
cmpwi r3,-1 # CARD_RESULT_BUSY
bne- exitMountMemoryCardLoop

# Exit if the limit has been reached
subic. r27,r27,1
bgt+ mountMemoryCardLoop

exitMountMemoryCardLoop:
cmpwi r3,0 # Check if something went wrong
bne- exit

# Allocate memory for CardFileInfo
li r4,20
bl allocateMemory

# Backup the returned address to be used for later
mr r27,r3

# Open the file
ori r3,r29,CARDOpen@l
mtlr r3
li r3,0 # Memory Card Slot A
ori r4,r31,INTERNAL_FILENAME_LOCATION@l
mr r5,r27 # Pointer to CardFileInfo
blrl
cmpwi r3,0 # Check if something went wrong
bne- freeCardFileInfo

# Allocate 0x200 bytes of memory, as the read size must be in multiples of 0x200 bytes
li r4,0x200 # Bytes to allocate
bl allocateMemory

# Backup the returned address to be used for later
mr r25,r3

# Read from the Card
ori r3,r29,CARDRead@l
mtlr r3
mr r3,r27 # Pointer to CardFileInfo
mr r4,r25 # Pointer to the File Buffer
li r5,0x200 # Amount of bytes to read
li r6,0x2000 # Offset in the file to start reading from
blrl
cmpwi r3,0 # Check if something went wrong
bne- freeCurrentMemoryArea

# Get the file size and adjust it to be in multiples of 0x200 bytes
lwz r26,0x40(r25) # File Size
addi r26,r26,511
rlwinm r26,r26,0,0,22

# Free the 0x200 bytes from earlier
mr r4,r25
bl freeMemory

# Allocate more bytes based on the adjusted file size
mr r4,r26
bl allocateMemory

# Backup the returned address to be used for later
mr r25,r3

# Read the REL Area of the file
ori r3,r29,CARDRead@l
mtlr r3
mr r3,r27 # Pointer to CardFileInfo
mr r4,r25 # Pointer to the File Buffer
mr r5,r26 # Adjusted File Size
li r6,0x2200 # Offset in the file to start reading from
blrl
cmpwi r3,0 # Check if something went wrong
bne- freeCurrentMemoryArea

# Get the BSS Area size and allocate memory for it
lwz r4,0x20(r25)
bl allocateMemory

# Backup the returned address to be used for later
mr r26,r3

# Link the functions in the REL
mr r3,r25 # Pointer to the Module
mr r4,r26 # Pointer to the BSS Area
bl linkRelFile
cmpwi r3,1 # Check if something went wrong
bne- freeRemainingMemory

# Store the BSS Area and the Module
stw r26,0x397C(r31) # Pointer to the BSS Area
stw r25,0x3980(r31) # Pointer to the Module

# Get the REL Prolog Pointer
lwz r28,0x34(r25)

# Done, so close and unmount the card
b closeCard

# Function definitions, error handling, etc.
freeMemory:
ori r3,r30,free@l
mtctr r3
lwz r3,heapOffset(r13) # Pointer to the heap to use - sRootHeap
bctr

allocateMemory:
ori r3,r30,alloc@l
mtctr r3
lwz r3,heapOffset(r13) # Pointer to the heap to use - sRootHeap
li r5,0x20 # 0x20 allocates from Head, -0x20 allocates from Tail
bctr

linkRelFile:
mflr r0
stw r0,0x4(sp)
stwu sp,-0x28(sp)
stmw r29,0x18(sp)
mr r31,r3
mr r30,r4

li r0,0x0
stb r0,0x33(r3)
lwz r0,0x1C(r3)
cmplwi r0,0x1
li r3,0 # False
bgt- exitLinkRelFile

lis r3,0x8000
addi r4,r3,0x30C8
lwzu r5,0x4(r4)
cmplwi r5,0x0
bne- linkRelFile_Loc_0xA0
stw r31,0x30C8(r3)
b linkRelFile_Loc_0xA4

linkRelFile_Loc_0xA0:
stw r31,0x4(r5)

linkRelFile_Loc_0xA4:
stw r5,0x8(r31)
li r0,0x0
stw r0,0x4(r31)
stw r31,0x0(r4)
lwz r0,0x10(r31)
add r0,r0,r31
stw r0,0x10(r31)
lwz r0,0x24(r31)
add r0,r0,r31
stw r0,0x24(r31)
lwz r0,0x28(r31)
add r0,r0,r31
stw r0,0x28(r31)
li r5,0x1
li r3,0x8
b linkRelFile_Loc_0x138

linkRelFile_Loc_0xFC:
lwz r0,0x10(r31)
add r4,r0,r3
lwz r0,0x0(r4)
cmplwi r0,0x0
beq- linkRelFile_Loc_0x11C
add r0,r0,r31
stw r0,0x0(r4)
b linkRelFile_Loc_0x130

linkRelFile_Loc_0x11C:
lwz r0,0x4(r4)
cmplwi r0,0x0
beq- linkRelFile_Loc_0x130
stb r5,0x33(r31)
stw r30,0x0(r4)

linkRelFile_Loc_0x130:
addi r3,r3,0x8
addi r5,r5,0x1

linkRelFile_Loc_0x138:
lwz r0,0xC(r31)
cmplw r5,r0
blt+ linkRelFile_Loc_0xFC
lwz r4,0x28(r31)
b linkRelFile_Loc_0x15C

linkRelFile_Loc_0x14C:
lwz r0,0x4(r4)
add r0,r0,r31
stw r0,0x4(r4)
addi r4,r4,0x8

linkRelFile_Loc_0x15C:
lwz r3,0x28(r31)
lwz r0,0x2C(r31)
add r0,r3,r0
cmplw r4,r0
blt+ linkRelFile_Loc_0x14C
lbz r0,0x30(r31)
cmplwi r0,0x0
beq- linkRelFile_Loc_0x198
lwz r3,0x10(r31)
rlwinm r0,r0,3,0,28
lwz r4,0x34(r31)
lwzx r0,r3,r0
rlwinm r0,r0,0,0,30
add r0,r4,r0
stw r0,0x34(r31)

linkRelFile_Loc_0x198:
lbz r0,0x31(r31)
cmplwi r0,0x0
beq- linkRelFile_Loc_0x1C0
lwz r3,0x10(r31)
rlwinm r0,r0,3,0,28
lwz r4,0x38(r31)
lwzx r0,r3,r0
rlwinm r0,r0,0,0,30
add r0,r4,r0
stw r0,0x38(r31)

linkRelFile_Loc_0x1C0:
lbz r0,0x32(r31)
cmplwi r0,0x0
beq- linkRelFile_Loc_0x1E8
lwz r3,0x10(r31)
rlwinm r0,r0,3,0,28
lwz r4,0x3C(r31)
lwzx r0,r3,r0
rlwinm r0,r0,0,0,30
add r0,r4,r0
stw r0,0x3C(r31)

linkRelFile_Loc_0x1E8:
lis r3,0x8000
lwz r3,0x30D0(r3)
cmplwi r3,0x0
beq- linkRelFile_Loc_0x204
lwz r0,0x14(r31)
add r0,r0,r3
stw r0,0x14(r31)

linkRelFile_Loc_0x204:
li r3,0x0
mr r4,r31
bl relocateRelFile
lis r3,0x8000
lwz r29,0x30C8(r3)
b linkRelFile_Loc_0x240

linkRelFile_Loc_0x21C:
mr r3,r31
mr r4,r29
bl relocateRelFile
cmplw r29,r31
beq- linkRelFile_Loc_0x23C
mr r3,r29
mr r4,r31
bl relocateRelFile

linkRelFile_Loc_0x23C:
lwz r29,0x4(r29)

linkRelFile_Loc_0x240:
cmplwi r29,0x0
bne+ linkRelFile_Loc_0x21C

lwz r5,0x20(r31)
mr r3,r30
li r4,0x0
lis r6,memset@h
ori r6,r6,memset@l
mtlr r6
blrl
li r3,1 # True

exitLinkRelFile:
lwz r0,0x2C(sp)
lmw r29,0x18(sp)
addi sp,sp,0x28
mtlr r0
blr

relocateRelFile:
mflr r0
stw r0,0x4(sp)
stwu sp,-0x40(sp)
stmw r23,0x1C(sp)

mr. r26,r3
mr r27,r4
beq- relocateRelFile_Loc_0x24
lwz r31,0x0(r26)
b relocateRelFile_Loc_0x28

relocateRelFile_Loc_0x24:
li r31,0x0

relocateRelFile_Loc_0x28:
lwz r3,0x28(r27)
lwz r0,0x2C(r27)
mr r4,r3
add r3,r3,r0
addi r0,r3,0x7
sub r0,r0,r4
rlwinm r0,r0,29,3,31
cmplw r4,r3
mtctr r0
bge- relocateRelFile_Loc_0x64

relocateRelFile_Loc_0x50:
lwz r0,0x0(r4)
cmplw r0,r31
beq- relocateRelFile_Loc_0x6C
addi r4,r4,0x8
bdnz+ relocateRelFile_Loc_0x50

relocateRelFile_Loc_0x64:
li r3,0 # False
b exitRelocateRelFile

relocateRelFile_Loc_0x6C:
lwz r30,0x4(r4)
li r29,0x0
b relocateRelFile_Loc_0x270

relocateRelFile_Loc_0x80:
lhz r0,0x0(r30)
cmplwi r31,0x0
add r28,r28,r0
beq- relocateRelFile_Loc_0xA8
lbz r0,0x3(r30)
lwz r3,0x10(r26)
rlwinm r0,r0,3,0,28
lwzx r0,r3,r0
rlwinm r5,r0,0,0,30
b relocateRelFile_Loc_0xAC

relocateRelFile_Loc_0xA8:
li r5,0x0

relocateRelFile_Loc_0xAC:
cmpwi r4,0x6
beq- relocateRelFile_Loc_0x174
bge- relocateRelFile_Loc_0xE4
cmpwi r4,0x2
beq- relocateRelFile_Loc_0x124
bge- relocateRelFile_Loc_0xD4
cmpwi r4,0x0
beq- relocateRelFile_Loc_0x26C
bge- relocateRelFile_Loc_0x114
b relocateRelFile_Loc_0x26C

relocateRelFile_Loc_0xD4:
cmpwi r4,0x4
beq- relocateRelFile_Loc_0x150
bge- relocateRelFile_Loc_0x160
b relocateRelFile_Loc_0x140

relocateRelFile_Loc_0xE4:
cmpwi r4,0xC9
beq- relocateRelFile_Loc_0x26C
bge- relocateRelFile_Loc_0x108
cmpwi r4,0xA
beq- relocateRelFile_Loc_0x1BC
blt- relocateRelFile_Loc_0x1A0
cmpwi r4,0xE
bge- relocateRelFile_Loc_0x26C
b relocateRelFile_Loc_0x1DC

relocateRelFile_Loc_0x108:
cmpwi r4,0xCB
bge- relocateRelFile_Loc_0x26C
b relocateRelFile_Loc_0x1FC

relocateRelFile_Loc_0x114:
lwz r0,0x4(r30)
add r0,r5,r0
stw r0,0x0(r28)
b relocateRelFile_Loc_0x26C

relocateRelFile_Loc_0x124:
lwz r0,0x4(r30)
lwz r3,0x0(r28)
add r0,r5,r0
rlwinm r3,r3,0,30,5
rlwimi r3,r0,0,6,29
stw r3,0x0(r28)
b relocateRelFile_Loc_0x26C

relocateRelFile_Loc_0x140:
lwz r0,0x4(r30)
add r0,r5,r0
sth r0,0x0(r28)
b relocateRelFile_Loc_0x26C

relocateRelFile_Loc_0x150:
lwz r0,0x4(r30)
add r0,r5,r0
sth r0,0x0(r28)
b relocateRelFile_Loc_0x26C

relocateRelFile_Loc_0x160:
lwz r0,0x4(r30)
add r0,r5,r0
rlwinm r0,r0,16,16,31
sth r0,0x0(r28)
b relocateRelFile_Loc_0x26C

relocateRelFile_Loc_0x174:
lwz r0,0x4(r30)
add r4,r5,r0
rlwinm. r0,r4,0,16,16
beq- relocateRelFile_Loc_0x18C
li r3,0x1
b relocateRelFile_Loc_0x190

relocateRelFile_Loc_0x18C:
li r3,0x0

relocateRelFile_Loc_0x190:
rlwinm r0,r4,16,16,31
add r0,r0,r3
sth r0,0x0(r28)
b relocateRelFile_Loc_0x26C

relocateRelFile_Loc_0x1A0:
lwz r0,0x4(r30)
lwz r3,0x0(r28)
add r0,r5,r0
rlwinm r3,r3,0,30,15
rlwimi r3,r0,0,16,29
stw r3,0x0(r28)
b relocateRelFile_Loc_0x26C

relocateRelFile_Loc_0x1BC:
lwz r0,0x4(r30)
lwz r3,0x0(r28)
add r0,r5,r0
sub r0,r0,r28
rlwinm r3,r3,0,30,5
rlwimi r3,r0,0,6,29
stw r3,0x0(r28)
b relocateRelFile_Loc_0x26C

relocateRelFile_Loc_0x1DC:
lwz r0,0x4(r30)
lwz r3,0x0(r28)
add r0,r5,r0
sub r0,r0,r28
rlwinm r3,r3,0,30,15
rlwimi r3,r0,0,16,29
stw r3,0x0(r28)
b relocateRelFile_Loc_0x26C

relocateRelFile_Loc_0x1FC:
lbz r0,0x3(r30)
cmplwi r29,0x0
lwz r3,0x10(r27)
rlwinm r0,r0,3,0,28
add r3,r3,r0
lwz r0,0x0(r3)
mr r23,r3
rlwinm r28,r0,0,0,30
beq- relocateRelFile_Loc_0x240
lwz r0,0x0(r29)
lwz r4,0x4(r29)
rlwinm r24,r0,0,0,30
mr r3,r24
bl callDCFlushRange
mr r3,r24
lwz r4,0x4(r29)
bl callICInvalidateRange

relocateRelFile_Loc_0x240:
lwz r0,0x0(r23)
rlwinm. r0,r0,0,31,31
beq- relocateRelFile_Loc_0x254
mr r0,r23
b relocateRelFile_Loc_0x258

relocateRelFile_Loc_0x254:
li r0,0x0

relocateRelFile_Loc_0x258:
mr r29,r0

relocateRelFile_Loc_0x26C:
addi r30,r30,0x8

relocateRelFile_Loc_0x270:
lbz r4,0x2(r30)
cmplwi r4,0xCB
bne+ relocateRelFile_Loc_0x80
cmplwi r29,0x0
beq- relocateRelFile_Loc_0x2A4
lwz r0,0x0(r29)
lwz r4,0x4(r29)
rlwinm r25,r0,0,0,30
mr r3,r25
bl callDCFlushRange
mr r3,r25
lwz r4,0x4(r29)
bl callICInvalidateRange

relocateRelFile_Loc_0x2A4:
li r3,1 # True

exitRelocateRelFile:
lmw r23,0x1C(sp)
lwz r0,0x44(sp)
addi sp,sp,0x40
mtlr r0
blr

unlinkRelFile:
mflr r0
stw r0,0x4(sp)
stwu sp,-0x18(sp)
stmw r30,0x10(sp)
mr r31,r3

lwz r4,0x4(r3)
lwz r5,0x8(r3)
cmplwi r4,0x0
bne- unlinkRelFile_Loc_0x34
lis r3,0x8000
stw r5,0x30CC(r3)
b unlinkRelFile_Loc_0x38

unlinkRelFile_Loc_0x34:
stw r5,0x8(r4)

unlinkRelFile_Loc_0x38:
cmplwi r5,0x0
bne- unlinkRelFile_Loc_0x4C
lis r3,0x8000
stw r4,0x30C8(r3)
b unlinkRelFile_Loc_0x50

unlinkRelFile_Loc_0x4C:
stw r4,0x4(r5)

unlinkRelFile_Loc_0x50:
lis r3,0x8000
lwz r30,0x30C8(r3)
b unlinkRelFile_Loc_0x6C

unlinkRelFile_Loc_0x5C:
mr r3,r31
mr r4,r30
bl undoLinkRelFile
lwz r30,0x4(r30)

unlinkRelFile_Loc_0x6C:
cmplwi r30,0x0
bne+ unlinkRelFile_Loc_0x5C

lis r3,0x8000
lwz r3,0x30D0(r3)
cmplwi r3,0x0
beq- unlinkRelFile_Loc_0x98
lwz r0,0x14(r31)
sub r0,r0,r3
stw r0,0x14(r31)

unlinkRelFile_Loc_0x98:
lbz r0,0x30(r31)
cmplwi r0,0x0
beq- unlinkRelFile_Loc_0xC0
lwz r4,0x10(r31)
rlwinm r3,r0,3,0,28
lwz r0,0x34(r31)
lwzx r3,r4,r3
rlwinm r3,r3,0,0,30
sub r0,r0,r3
stw r0,0x34(r31)

unlinkRelFile_Loc_0xC0:
lbz r0,0x31(r31)
cmplwi r0,0x0
beq- unlinkRelFile_Loc_0xE8
lwz r4,0x10(r31)
rlwinm r3,r0,3,0,28
lwz r0,0x38(r31)
lwzx r3,r4,r3
rlwinm r3,r3,0,0,30
sub r0,r0,r3
stw r0,0x38(r31)

unlinkRelFile_Loc_0xE8:
lbz r0,0x32(r31)
cmplwi r0,0x0
beq- unlinkRelFile_Loc_0x110
lwz r4,0x10(r31)
rlwinm r3,r0,3,0,28
lwz r0,0x3C(r31)
lwzx r3,r4,r3
rlwinm r3,r3,0,0,30
sub r0,r0,r3
stw r0,0x3C(r31)

unlinkRelFile_Loc_0x110:
lwz r4,0x28(r31)
b unlinkRelFile_Loc_0x128

unlinkRelFile_Loc_0x118:
lwz r0,0x4(r4)
sub r0,r0,r31
stw r0,0x4(r4)
addi r4,r4,0x8

unlinkRelFile_Loc_0x128:
lwz r3,0x28(r31)
lwz r0,0x2C(r31)
add r0,r3,r0
cmplw r4,r0
blt+ unlinkRelFile_Loc_0x118
li r6,0x1
li r5,0x8
li r3,0x0
b unlinkRelFile_Loc_0x188

unlinkRelFile_Loc_0x14C:
lbz r0,0x33(r31)
lwz r4,0x10(r31)
cmplw r6,r0
add r4,r4,r5
bne- unlinkRelFile_Loc_0x16C
stb r3,0x33(r31)
stw r3,0x0(r4)
b unlinkRelFile_Loc_0x180

unlinkRelFile_Loc_0x16C:
lwz r0,0x0(r4)
cmplwi r0,0x0
beq- unlinkRelFile_Loc_0x180
sub r0,r0,r31
stw r0,0x0(r4)

unlinkRelFile_Loc_0x180:
addi r5,r5,0x8
addi r6,r6,0x1

unlinkRelFile_Loc_0x188:
lwz r0,0xC(r31)
cmplw r6,r0
blt+ unlinkRelFile_Loc_0x14C
lwz r0,0x24(r31)
li r3,1 # True
sub r0,r0,r31
stw r0,0x24(r31)
lwz r0,0x28(r31)
sub r0,r0,r31
stw r0,0x28(r31)
lwz r0,0x10(r31)
sub r0,r0,r31
stw r0,0x10(r31)

lwz r0,0x1C(sp)
lmw r30,0x10(sp)
addi sp,sp,0x18
mtlr r0
blr

undoLinkRelFile:
mflr r0
stw r0,0x4(sp)
stwu sp,-0x38(sp)
stmw r25,0x1C(sp)
mr r28,r4

lwz r4,0x0(r3)
lwz r3,0x28(r28)
lwz r0,0x2C(r28)
mr r5,r3
add r3,r3,r0
addi r0,r3,0x7
sub r0,r0,r5
rlwinm r0,r0,29,3,31
cmplw r5,r3
mtctr r0
bge- undoLinkRelFile_Loc_0x54

undoLinkRelFile_Loc_0x40:
lwz r0,0x0(r5)
cmplw r0,r4
beq- undoLinkRelFile_Loc_0x5C
addi r5,r5,0x8
bdnz+ undoLinkRelFile_Loc_0x40

undoLinkRelFile_Loc_0x54:
li r3,0 # False
b exitUndoLinkRelFile

undoLinkRelFile_Loc_0x5C:
lwz r31,0x4(r5)
li r30,0x0
b undoLinkRelFile_Loc_0x1EC

undoLinkRelFile_Loc_0x70:
lhz r0,0x0(r31)
cmpwi r4,0x6
li r3,0x0
add r29,r29,r0
beq- undoLinkRelFile_Loc_0x124
bge- undoLinkRelFile_Loc_0xB4
cmpwi r4,0x2
beq- undoLinkRelFile_Loc_0xF0
bge- undoLinkRelFile_Loc_0xA4
cmpwi r4,0x0
beq- undoLinkRelFile_Loc_0x1E8
bge- undoLinkRelFile_Loc_0xE4
b undoLinkRelFile_Loc_0x1E8

undoLinkRelFile_Loc_0xA4:
cmpwi r4,0x4
beq- undoLinkRelFile_Loc_0x10C
bge- undoLinkRelFile_Loc_0x118
b undoLinkRelFile_Loc_0x100

undoLinkRelFile_Loc_0xB4:
cmpwi r4,0xC9
beq- undoLinkRelFile_Loc_0x1E8
bge- undoLinkRelFile_Loc_0xD8
cmpwi r4,0xA
beq- undoLinkRelFile_Loc_0x140
blt- undoLinkRelFile_Loc_0x130
cmpwi r4,0xE
bge- undoLinkRelFile_Loc_0x1E8
b undoLinkRelFile_Loc_0x168

undoLinkRelFile_Loc_0xD8:
cmpwi r4,0xCB
bge- undoLinkRelFile_Loc_0x1E8
b undoLinkRelFile_Loc_0x178

undoLinkRelFile_Loc_0xE4:
li r0,0x0
stw r0,0x0(r29)
b undoLinkRelFile_Loc_0x1E8

undoLinkRelFile_Loc_0xF0:
lwz r0,0x0(r29)
rlwinm r0,r0,0,30,5
stw r0,0x0(r29)
b undoLinkRelFile_Loc_0x1E8

undoLinkRelFile_Loc_0x100:
li r0,0x0
sth r0,0x0(r29)
b undoLinkRelFile_Loc_0x1E8

undoLinkRelFile_Loc_0x10C:
li r0,0x0
sth r0,0x0(r29)
b undoLinkRelFile_Loc_0x1E8

undoLinkRelFile_Loc_0x118:
li r0,0x0
sth r0,0x0(r29)
b undoLinkRelFile_Loc_0x1E8

undoLinkRelFile_Loc_0x124:
li r0,0x0
sth r0,0x0(r29)
b undoLinkRelFile_Loc_0x1E8

undoLinkRelFile_Loc_0x130:
lwz r0,0x0(r29)
rlwinm r0,r0,0,30,15
stw r0,0x0(r29)
b undoLinkRelFile_Loc_0x1E8

undoLinkRelFile_Loc_0x140:
lbz r0,0x32(r28)
cmplwi r0,0x0
beq- undoLinkRelFile_Loc_0x154
lwz r0,0x3C(r28)
sub r3,r0,r29

undoLinkRelFile_Loc_0x154:
lwz r0,0x0(r29)
rlwinm r0,r0,0,30,5
rlwimi r0,r3,0,6,29
stw r0,0x0(r29)
b undoLinkRelFile_Loc_0x1E8

undoLinkRelFile_Loc_0x168:
lwz r0,0x0(r29)
rlwinm r0,r0,0,30,15
stw r0,0x0(r29)
b undoLinkRelFile_Loc_0x1E8

undoLinkRelFile_Loc_0x178:
lbz r0,0x3(r31)
cmplwi r30,0x0
lwz r3,0x10(r28)
rlwinm r0,r0,3,0,28
add r3,r3,r0
lwz r0,0x0(r3)
mr r26,r3
rlwinm r29,r0,0,0,30
beq- undoLinkRelFile_Loc_0x1BC
lwz r0,0x0(r30)
lwz r4,0x4(r30)
rlwinm r25,r0,0,0,30
mr r3,r25
bl callDCFlushRange
mr r3,r25
lwz r4,0x4(r30)
bl callICInvalidateRange

undoLinkRelFile_Loc_0x1BC:
lwz r0,0x0(r26)
rlwinm. r0,r0,0,31,31
beq- undoLinkRelFile_Loc_0x1D0
mr r0,r26
b undoLinkRelFile_Loc_0x1D4

undoLinkRelFile_Loc_0x1D0:
li r0,0x0

undoLinkRelFile_Loc_0x1D4:
mr r30,r0

undoLinkRelFile_Loc_0x1E8:
addi r31,r31,0x8

undoLinkRelFile_Loc_0x1EC:
lbz r4,0x2(r31)
cmplwi r4,0xCB
bne+ undoLinkRelFile_Loc_0x70
cmplwi r30,0x0
beq- undoLinkRelFile_Loc_0x220
lwz r0,0x0(r30)
lwz r4,0x4(r30)
rlwinm r27,r0,0,0,30
mr r3,r27
bl callDCFlushRange
mr r3,r27
lwz r4,0x4(r30)
bl callICInvalidateRange

undoLinkRelFile_Loc_0x220:
li r3,1 # True

exitUndoLinkRelFile:
lmw r25,0x1C(sp)
lwz r0,0x3C(sp)
addi sp,sp,0x38
mtlr r0
blr

callDCFlushRange:
lis r5,DCFlushRange@h
ori r5,r5,DCFlushRange@l
mtctr r5
bctr

callICInvalidateRange:
lis r5,ICInvalidateRange@h
ori r5,r5,ICInvalidateRange@l
mtctr r5
bctr

freeRemainingMemory:
mr r3,r25 # Pointer to the Module
bl unlinkRelFile

# Free the BSS Area and the File Buffer
mr r4,r26 # Pointer to the BSS Area
bl freeMemory

freeCurrentMemoryArea:
mr r4,r25 # Pointer to the File Buffer or the 0x200 Bytes Buffer
bl freeMemory

closeCard:
ori r3,r29,CARDClose@l
mtlr r3
mr r3,r27 # Pointer to CardFileInfo
blrl

freeCardFileInfo:
mr r4,r27
bl freeMemory

# Unmount the Memory Card
ori r3,r29,CARDUnmount@l
mtlr r3
li r3,0 # Memory Card Slot A
blrl

# Run the REL Prolog if the load was successful
cmpwi r28,0
beq- exit
mtlr r28
blrl

exit:
# Restore register values
lmw r25,0x8(sp)
addi sp,sp,0x30

# Add back in overwritten instruction
lmw r27,0x14(sp)